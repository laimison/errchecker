#!/bin/bash
#
# Alpha version
#
# This tool simulates Tomcat by generating logs - if you have Tomcat logs, you don't need this script
#
# You can run this in a loop for testing purposes:
# while true; do ./fake_logs_generator; sleep 1; done
#

# Every Bash script should include this to exit script immediately if non-true value appeared
set -e

# Check for syntax errors before running the script
if bash -n $0
then
  echo -n
else
  echo "ERROR: Syntax error found. Exiting..."
  exit 1
fi

logs_dir='/tmp/tomcat-logs'
echo "INFO: Logs dir is ${logs_dir}"

# The trap statement tells the script to run received_signal() on signals 1, 2, 3 or 6. The most common one (CTRL-C) is signal 2 (SIGINT).
trap received_signal 1 2 3 6

received_signal()
{
  echo "Caught Signal ... Doing clean up."
  /bin/rm -f ${logs_dir}/fake_*
  echo "Exiting."
  exit 1
}

# I have written this script on Mac OS
if uname -s | grep -iq ^Darwin
then
  script_dir=`greadlink -f $0`
else
  script_dir=`readlink -f $0`
fi
echo "INFO: Script dir is ${script_dir}"

logs_location=`dirname ${script_dir}`/../fake_logs
echo "INFO: Logs location is ${logs_location}"

mkdir -p $logs_dir

fake_logs () {
  # Going through log files... also ensuring that 1) file type is text 2) there is pipe to while loop because we prefer to use memory instead of disk e.g. /tmp/log_file_list.txt
  file ${logs_location}/* | grep -E ':.*[\t ]text' | awk -F ':' '{print $1}' | while read log_location
  do
    log_name=`basename "${log_location}"`

    case $1 in
	  generate)
                  touch "${logs_dir}/fake_${log_name}"
                  sleep 1
                  # Print one line every 20 miliseconds - it's easier to read the stream instead of cat'ing hundreds lines immediately
                  cat "$log_location" | awk '{system("sleep .020");print}' >> "${logs_dir}/fake_${log_name}"
		  ;;
	  remove)
		  /bin/rm -f "${logs_dir}/fake_${log_name}"
		  ;;
	  *)
		  echo "ERROR: Error in function ${FUNCNAME[0]}: Sorry, I don't understand"
      exit 1
		  ;;
    esac

    echo "INFO: ${1} ${log_name} ..."

    sleep 3
  done
}

# Action starts here
fake_logs generate
fake_logs remove
